Variables and Mutability:
    - By default variables are immutable for safety and easy concurrency
    - constants are values that are bound to a name and are not allowed to change(screams immutable variables) however they are different to variables
        - You are not allowed to use mut with constants- they are ALWAYS ALWAYS mutable
        - we declare constants usin the key word const not the let like in variables
        - can be declared in any scope including the global scope which makes them useful for values that many parts of the code need to know about
        - may be set only to a constant expression, not the result of a value that may be comouted at runtime
        - naming convention of consts is to use all UPPERCASE WITH UNDERSCORES BETWEEN WORDS
        - The compiler is able to evaluate a limited set of operations at compile time, which lets us choose to write (60*60*3) instead of 
            10,800 because the prev is easier to understand and verify
        - valid for the entire program's runtime


                const THREE_HOURS_IN_SECONDS: u32 = 60*60*3


    - shadowing
        -you can declare a new variable with the same name as a previous variable
        -first variable is shadowed by the second menaing the second is what will be used
        -by using let , we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed
        -another difference between mut and shadowing is that because we are effectively creating a new variable when we use the let keyword again we can change 
        the type of value but reuse the same name
        -saves us from using different names for like the same thing. First spaces is string and second is number type
        - if we use mut instead it will return a compile error saying we cant mutate a variables type

                let spaces = "  ";
                let spaces = spaces.len();

        



        
