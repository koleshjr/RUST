Rust programs are saved with .rs extension
To run them we use rustc file_name -> ./main (the func name in the program)
If you find an error linker cc not found run:
    sudo apt-get update
    sudo apt install build-essential

hello cargo:
    cargo is Rust's build system and package manager
    helps you build your code
    download the libraries your code depends on
    building those libraries
    Makes adding dependencies easier
    How we use it:
        cargo new hello_cargo - creates a new directory and project called hello_cargo and cargo creates its files in a dir of the same name
            - generates two files Cargo.toml and src dir with main.rs file inside
            - also inits a new Git repository along with a .gitignore file if you were working on a non git initialized dir
            - can be overwritten by cargo new --vcs=git
            - Cargo.toml (Tom's obvious minimal language) is cargo's config format
                [package] 
                name = "hello_cargo"
                version = "0.1.0"
                edition = "2021"

                # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

                [dependencies]
                rand = "0.8.5" ("semantic versioning") - to update this you woud need to modify the semver to "0.9.0" to use the 9 series
                - list any of your projects dependencies
                - packages of code are called crates in Rust
                - when we include an external dependency , cargo fetches the latest versions of everything that dependency needs from the regstry
                    copy of data from crates.io where people in the Rust ecosystem post their open source rust projects for others to use


            -src directory is where your source files should live in
            -top level project dir is where your readme files, license info and config files should live and anything else not related to your code
            -Cargo.lock ensures that running the program in future , still reproduces despite new versions of crates having come out

            -cargo update ignores the Cargo.lock file and will figure out all the latest versions that fit your specs in Cargo.toml then cargo will write those
            versions to the Cargo.lock file

        You can see how cargo helps you organize your codes
    
    Buildin a cargo project
        cargo build - in your working dir
        the result is the binary is placed in a directory named debug -> target/debug/hello_cargo
        You can run the binary executable using ./target/debug/hello_cargo
        running cargo build for the first time also creates a new file at the top called Cargo.lock that keeps track of exact versions
        of dependencies in your project - cargo manages its content for you so you dont have to manually change it

    To both compile and run the program at the same time you :
        use cargo run on the working dir

    To quicky check if your code compiles you can use:
        cargo check - doesnt produce an executable though
        it is often much faster than cargo build since it skips the steps of producing an executable
        Periodically run cargo check to make sure it compiles the finally run cargo build after youve finished working on the project

    Summary of using cargo:
        create a new project using cargo new
        build a project using cargo build
        build and run a project in one step using cargo run
        build a project without producing a binary to check for errors using cargo check
        storage of the build is not in the same dir but in target/debug directory

    Building for release:
        use cargo build --release to compile it with optimizations
        Creates an executable in .target/release and makes your code run faster
        Turning them on though lengthens the time for your program to compile
        Benchmarking your code's running time be sure to run cargo build --release and benchmark with the executable in target/ release

        

storing values with variables
    we use the let keyword to create the var -> let apples = 5;
    variables are immutable by default
    so to make the variable mutable we have to add mut before the variable name: let mut apples = 5;
    when printing the value of a variable , the variable name can go inside the curly brackets 
    when printing the result of evaluating an expression , place empty curly brackets in the format string then follow the format string 
    with a comma-separated list of expressions to print in each empty curly bracket placeholder in the same order

        - let x = 5;
        - let y =10;
        println!("x = {x} and y + 2 ={}", y + 2);


crate is a a collection of rust code files
    -we have a binary crate which is an executable and a library crate code intended to be used in other programs and cannot be executed on its own
    - You won't just know which traits to use and which methods and functions to call from a crate so each crate has documentation with instructions for using it
    - running cargo doc --open command builds a documentation provided by all your dependencies locally and opens it in your browser
    
Rust has a strong static type system
It also has a type inference e.g let mut guess = String::new(), it was able to infer that guess should be a string
Rust number type can have a value between 1 and 100-> i32-32 bit number ,u32 - unsigned 32 bit number, i64-64 bit number ,
Rust defaults to i32
Shadowing helps us to reuse variables instead of defining two different vars for the same thing and is mostly used when converting a value from one type to another
guess.trim().parse()
trim removes any white spaces in the beginning or the end, while parse converts from one data type to anothere.g string to a number


